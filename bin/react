#!/usr/bin/env node
var _ = require('lodash');

process.bin = process.title = 'react';

var program = require('commander');
var pkg = require('../package.json');
var fs = require('fs-extra');
var path = require('path');
var ejs = require('ejs');

// Parse command line options

program
    .version(pkg.version)
    .usage("<command> [options]");

program
    .command("new <name>")
    .description("Generate a new react app boilerplate.")
    .action(function(name, options) {

      var templatePath = path.join(__dirname, '../template');
      var destinationPath = path.join(process.cwd(), name);

      console.log("Creating " + name + "...");

      fs.copy(templatePath, destinationPath, function(err) {
        if (err) {
          return console.error(err);
        }
        console.log('Success!');
      });

    });

program
    .command("component <name> [path] [propName:PropType...]")
    .option("-s, --stateful", "Enable lifecycle method generation")
    .description("Generate a new react component.  Path should point to the exact directory where the component should be made")
    .action(function(name, pathName, propDefs) {
      var props = [];
      var possibleTypes = {
        "any": "React.PropTypes.any",
        "requiredAny": "React.PropTypes.any.isRequired",
        "func": "React.PropTypes.func",
        "requiredFunc": "React.PropTypes.func.isRequired",
        "array": "React.PropTypes.array",
        "requiredArray": "React.PropTypes.array.isRequired",
        "bool": "React.PropTypes.bool",
        "requiredBool": "React.PropTypes.bool.isRequired",
        "number": "React.PropTypes.number",
        "requiredNumber": "React.PropTypes.number.isRequired",
        "object": "React.PropTypes.object",
        "requiredObject": "React.PropTypes.object.isRequired",
        "string": "React.PropTypes.string",
        "requiredString": "React.PropTypes.string.isRequired",
      };
      propDefs.forEach(function(propDef) {
        var nameType = propDef.split(":");
        props.push({
          name: nameType[0],
          type: possibleTypes[nameType[1]]
        });
      });
      var stateful = this.stateful;
      fs.readFile(path.join(__dirname, "../templates", "component.ejs"), 'utf8', function(err, data) {
        var component = ejs.render(data, {
          stateful: stateful,
          name: _.capitalize(name),
          props: props
        });
        fs.writeFile(path.join(pathName || process.cwd(), _.capitalize(name) + ".jsx"), component);
      });
    });

program
    .command("reflux <name> [path]")
    .description("Generate a reflux store and action file.  Path should point to the lib directory which houses both the actions and the stores folders")
    .action(function(name, pathName) {
      fs.readFile(path.join(__dirname, "../templates", "store.ejs"), 'utf8', function(err, data) {
        var component = ejs.render(data, {
          name: _.capitalize(name)
        });
        fs.writeFile(path.join(pathName || process.cwd(), '../actions', name.toLowerCase() + "Store.js"), component);
      });
      fs.readFile(path.join(__dirname, "../templates", "actions.ejs"), 'utf8', function(err, data) {
        var component = ejs.render(data, {
          name: _.capitalize(name)
        });
        fs.writeFile(path.join(pathName || process.cwd(), '../stores', name.toLowerCase() + "Actions.js"), component);
      });
    });

// Failsafe that shows the help dialogue if the command is not recognized (`$ react xyz`)
program.on('*', function(opt) {
  program.help();
});

program.parse(process.argv);

// Handle case where no command is passed (`$ react`)
if (!process.argv.slice(2).length) {
  program.help();
}
